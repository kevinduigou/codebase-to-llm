from __future__ import annotations

from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import PlainTextResponse

from codebase_to_llm.application import (
    uc_get_ass_file_by_video_id,
    uc_update_ass_file_by_video_id,
    uc_delete_ass_file_by_video_id,
    uc_magic_ass,
)
from codebase_to_llm.domain.user import User

from .dependencies import (
    get_current_user,
    get_video_subtitle_repo,
    get_file_repo,
    get_file_storage,
    get_user_repositories,
    _llm_adapter,
)
from .schemas import (
    AssFileResponse,
    AssFileUpdateRequest,
    MagicAssRequest,
)

router = APIRouter(prefix="/video_subtitles", tags=["Video Subtitles"])


@router.get("/video/{video_file_id}/ass", summary="Get ASS file by video ID")
def get_ass_file_by_video_id(
    video_file_id: str,
    current_user: User = Depends(get_current_user),
    video_subtitle_repo=Depends(get_video_subtitle_repo),
    file_repo=Depends(get_file_repo),
    file_storage=Depends(get_file_storage),
) -> AssFileResponse:
    """Get the ASS subtitle file ID and content for a given video file ID."""
    result = uc_get_ass_file_by_video_id.execute(
        video_file_id,
        current_user.id().value(),
        video_subtitle_repo,
        file_repo,
        file_storage,
    )
    if result.is_err():
        raise HTTPException(status_code=404, detail=result.err())
    result_data = result.ok()
    assert result_data is not None
    subtitle_file_id, content = result_data
    return AssFileResponse(subtitle_file_id=subtitle_file_id, content=content)


@router.get(
    "/video/{video_file_id}/magic_ass", summary="Transform ASS file with LLM"
)
def magic_ass(
    video_file_id: str,
    request: MagicAssRequest,
    current_user: User = Depends(get_current_user),
) -> PlainTextResponse:
    """Return updated ASS content generated by the LLM."""
    api_key_repo, model_repo, _, _, _ = get_user_repositories(current_user)
    result = uc_magic_ass.execute(
        request.content, request.prompt, _llm_adapter, model_repo, api_key_repo
    )
    if result.is_err():
        raise HTTPException(status_code=400, detail=result.err())
    updated_content = result.ok()
    assert updated_content is not None
    return PlainTextResponse(updated_content)


@router.put("/video/{video_file_id}/ass", summary="Update ASS file by video ID")
def update_ass_file_by_video_id(
    video_file_id: str,
    request: AssFileUpdateRequest,
    current_user: User = Depends(get_current_user),
    video_subtitle_repo=Depends(get_video_subtitle_repo),
    file_repo=Depends(get_file_repo),
    file_storage=Depends(get_file_storage),
) -> AssFileResponse:
    """Replace the ASS subtitle content for a given video file ID."""
    result = uc_update_ass_file_by_video_id.execute(
        video_file_id, request.content, video_subtitle_repo, file_repo, file_storage
    )
    if result.is_err():
        raise HTTPException(status_code=400, detail=result.err())
    subtitle_file_id = result.ok()
    assert subtitle_file_id is not None
    return AssFileResponse(subtitle_file_id=subtitle_file_id, content=request.content)


@router.delete("/video/{video_file_id}/ass", summary="Delete ASS file by video ID")
def delete_ass_file_by_video_id(
    video_file_id: str,
    current_user: User = Depends(get_current_user),
    video_subtitle_repo=Depends(get_video_subtitle_repo),
    file_repo=Depends(get_file_repo),
    file_storage=Depends(get_file_storage),
) -> dict[str, str]:
    """Delete the ASS subtitle file and its association for a video."""
    result = uc_delete_ass_file_by_video_id.execute(
        video_file_id, video_subtitle_repo, file_repo, file_storage
    )
    if result.is_err():
        raise HTTPException(status_code=400, detail=result.err())
    subtitle_file_id = result.ok()
    assert subtitle_file_id is not None
    return {"deleted_subtitle_file_id": subtitle_file_id}
